#!/bin/bash

# Use like this:
# ./deploy demo organia-frontend master
# ./deploy prod organia-server abcdef12

set -eux

mkcd()
{
	mkdir -p "$1"
	cd "$1"
}

finish()
{
	echo Done
	exit ${1:-0}
}


environment=$1
shift

project=$1
shift

commit=$1
shift

# Use the project specific SSH key
export GIT_SSH_COMMAND="ssh -i $HOME/.ssh/id_rsa.$project -o IdentitiesOnly=yes"

# Name of the Docker image to build
image="$project:$environment"

# Name of the container to create
container="$project-$environment"

# Where to checkout the repo
dir="$HOME/deploy/envs/$environment/$project"

# What directory on the host to bind inside the frontend container
front_host_mount="/srv/organia-frontend/$environment"

# What directory inside the frontend container to bind
front_container_mount=/app/dist


# Start up from a clean directory
rm -rf "$dir"
mkcd "$dir"

# Only checkout the commit we want to build and nothing else
git init .
git remote add origin "git@github.com:OrganIA/$project.git"
git fetch --depth 1 origin "$commit"
git checkout FETCH_HEAD

# Build the Docker image
podman build . -t "$project:$environment"

# Stop and remove container with the same name if it already exists
podman rm -fi "$container"


if [ "$environment" == 'prod' ]; then
	port=8001
	url=https://organia.savatier.fr/api/
	ws_url=wss://organia.savatier.fr/api/chats/ws
elif [ "$environment" == 'dev' ]; then
	port=8002
	url=https://dev.organia.savatier.fr/api/
	ws_url=wss://dev.organia.savatier.fr/api/chats/ws
elif [ "$environment" == 'demo' ]; then
	port=8003
	url=https://demo.organia.savatier.fr/api/
	ws_url=wss://demo.organia.savatier.fr/api/chats/ws
fi

if [ "$project" == 'organia-frontend' ]; then
	# Run the image, this should build the frontend files
	podman run --rm --name "$container" \
		-v "$front_host_mount:$front_container_mount" \
		-e VUE_APP_API_REMOTE_URL="$url" \
		-e VUE_APP_WEBSOCKET_REMOTE_URL="$ws_url" \
		"$image"
	finish
fi

if [ "$project" == 'organia-server' ]; then
	# Run the image, this should listen on a port in the background
	podman run -d --rm --name "$container" \
		-p "$port:8000" \
		-e ENVIRONMENT="$environment" \
		"$image"
	finish
fi
